class Personaje:

    def __init__(self, nombre, fuerza, inteligencia, defensa, vida):
        self.nombre = nombre
        self.fuerza = fuerza
        self.inteligencia = inteligencia
        self.defensa = defensa
        self.vida = vida

    def atributos(self):
        print(self.nombre, ":", sep="")
        print("·Fuerza:", self.fuerza)
        print("·Inteligencia:", self.inteligencia)
        print("·Defensa:", self.defensa)
        print("·Vida:", self.vida)

    def subir_nivel(self, fuerza, inteligencia, defensa):
        self.fuerza += fuerza
        self.inteligencia += inteligencia
        self.defensa += defensa

    def esta_vivo(self):
        return self.vida > 0

    def morir(self):
        self.vida = 0
        print(self.nombre, "ha muerto")

    def daño(self, enemigo):
        return max(0, self.fuerza - enemigo.defensa)  # Para evitar daño negativo

    def atacar(self, enemigo):
        daño = self.daño(enemigo)
        enemigo.vida -= daño
        print(self.nombre, "ha realizado", daño, "puntos de daño a", enemigo.nombre)
        if enemigo.esta_vivo():
            print("Vida de", enemigo.nombre, "es", enemigo.vida)
        else:
            enemigo.morir()


class Healer(Personaje):

    def __init__(self, nombre, fuerza, inteligencia, defensa, vida, sanacion):
        super().__init__(nombre, fuerza, inteligencia, defensa, vida)
        self.sanacion = sanacion

    def atributos(self):
        super().atributos()
        print("·Sanación:", self.sanacion)

    def curar(self, aliado):
        if aliado.esta_vivo():
            aliado.vida += self.sanacion
            print(self.nombre, "ha curado", self.sanacion, "puntos de vida a", aliado.nombre)
            print("Vida de", aliado.nombre, "es", aliado.vida)

    def daño(self, enemigo):
        return max(0, self.inteligencia - enemigo.defensa)  # Healers causan daño basado en inteligencia


class Assassin(Personaje):

    def __init__(self, nombre, fuerza, inteligencia, defensa, vida, critico):
        super().__init__(nombre, fuerza, inteligencia, defensa, vida)
        self.critico = critico

    def atributos(self):
        super().atributos()
        print("·Crítico:", self.critico)

    def daño(self, enemigo):
        daño_base = super().daño(enemigo)
        daño_critico = daño_base * self.critico if random.random() < 0.3 else daño_base  # 30% probabilidad de crítico
        return max(0, daño_critico)


def combate(jugador_1, jugador_2):
    turno = 0
    while jugador_1.esta_vivo() and jugador_2.esta_vivo():
        print("\nTurno", turno)
        print(">>> Acción de", jugador_1.nombre, ":", sep="")
        jugador_1.atacar(jugador_2)
        if jugador_2.esta_vivo():
            print(">>> Acción de", jugador_2.nombre, ":", sep="")
            jugador_2.atacar(jugador_1)
        turno += 1
    if jugador_1.esta_vivo():
        print("\nHa ganado", jugador_1.nombre)
    elif jugador_2.esta_vivo():
        print("\nHa ganado", jugador_2.nombre)
    else:
        print("\nEmpate")


# Ejemplo de uso
import random

personaje_1 = Healer("Medea", 5, 20, 3, 100, 10)
personaje_2 = Assassin("Zed", 15, 5, 5, 100, 2)

personaje_1.atributos()
personaje_2.atributos()

combate(personaje_1, personaje_2)
